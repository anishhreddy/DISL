$date
	Sat Oct 18 20:38:03 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module DEC4to16_3to8_tb $end
$var wire 16 ! y [0:15] $end
$var reg 1 " en $end
$var reg 4 # w [3:0] $end
$scope module DEC4to16_3to8_ins $end
$var wire 1 " en $end
$var wire 4 $ w [3:0] $end
$var wire 16 % y [0:15] $end
$scope module stage0 $end
$var wire 1 & en $end
$var wire 3 ' w [2:0] $end
$var reg 8 ( y [0:7] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ) i [31:0] $end
$upscope $end
$upscope $end
$scope module stage1 $end
$var wire 1 * en $end
$var wire 3 + w [2:0] $end
$var reg 8 , y [0:7] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 - i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 . i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 / i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx /
b0 .
b1000 -
b0 ,
b0 +
0*
b1000 )
b0 (
b0 '
0&
b0 %
b0 $
b0 #
0"
b0 !
$end
#10
b1000 )
b1000 -
b1 '
b1 +
b1 #
b1 $
b1 .
#20
b1000 )
b1000 -
b10 '
b10 +
b10 #
b10 $
b10 .
#30
b1000 )
b1000 -
b11 '
b11 +
b11 #
b11 $
b11 .
#40
b1000 )
b1000 -
b100 '
b100 +
b100 #
b100 $
b100 .
#50
b1000 )
b1000 -
b101 '
b101 +
b101 #
b101 $
b101 .
#60
b1000 )
b1000 -
b110 '
b110 +
b110 #
b110 $
b110 .
#70
b1000 )
b1000 -
b111 '
b111 +
b111 #
b111 $
b111 .
#80
b1000 )
b1000 -
b0 '
b0 +
b1000 #
b1000 $
b1000 .
#90
b1000 )
b1000 -
b1 '
b1 +
b1001 #
b1001 $
b1001 .
#100
b1000 )
b1000 -
b10 '
b10 +
b1010 #
b1010 $
b1010 .
#110
b1000 )
b1000 -
b11 '
b11 +
b1011 #
b1011 $
b1011 .
#120
b1000 )
b1000 -
b100 '
b100 +
b1100 #
b1100 $
b1100 .
#130
b1000 )
b1000 -
b101 '
b101 +
b1101 #
b1101 $
b1101 .
#140
b1000 )
b1000 -
b110 '
b110 +
b1110 #
b1110 $
b1110 .
#150
b1000 )
b1000 -
b111 '
b111 +
b1111 #
b1111 $
b1111 .
#160
b10000000 (
1&
b1000 )
b1000000000000000 !
b1000000000000000 %
b0 ,
b1000 -
b0 '
b0 +
0*
b0 #
b0 $
1"
b0 /
b10000 .
#170
b1000 )
b100000000000000 !
b100000000000000 %
b1000000 (
b1000 -
b1 '
b1 +
b1 #
b1 $
b1 /
#180
b1000 )
b10000000000000 !
b10000000000000 %
b100000 (
b1000 -
b10 '
b10 +
b10 #
b10 $
b10 /
#190
b1000 )
b1000000000000 !
b1000000000000 %
b10000 (
b1000 -
b11 '
b11 +
b11 #
b11 $
b11 /
#200
b1000 )
b100000000000 !
b100000000000 %
b1000 (
b1000 -
b100 '
b100 +
b100 #
b100 $
b100 /
#210
b1000 )
b10000000000 !
b10000000000 %
b100 (
b1000 -
b101 '
b101 +
b101 #
b101 $
b101 /
#220
b1000 )
b1000000000 !
b1000000000 %
b10 (
b1000 -
b110 '
b110 +
b110 #
b110 $
b110 /
#230
b1000 )
b100000000 !
b100000000 %
b1 (
b1000 -
b111 '
b111 +
b111 #
b111 $
b111 /
#240
0&
b10000000 ,
b1000 )
b10000000 !
b10000000 %
b0 (
1*
b1000 -
b0 '
b0 +
b1000 #
b1000 $
b1000 /
#250
b1000 )
b1000 -
b1000000 !
b1000000 %
b1000000 ,
b1 '
b1 +
b1001 #
b1001 $
b1001 /
#260
b1000 )
b1000 -
b100000 !
b100000 %
b100000 ,
b10 '
b10 +
b1010 #
b1010 $
b1010 /
#270
b1000 )
b1000 -
b10000 !
b10000 %
b10000 ,
b11 '
b11 +
b1011 #
b1011 $
b1011 /
#280
b1000 )
b1000 -
b1000 !
b1000 %
b1000 ,
b100 '
b100 +
b1100 #
b1100 $
b1100 /
#290
b1000 )
b1000 -
b100 !
b100 %
b100 ,
b101 '
b101 +
b1101 #
b1101 $
b1101 /
#300
b1000 )
b1000 -
b10 !
b10 %
b10 ,
b110 '
b110 +
b1110 #
b1110 $
b1110 /
#310
b1000 )
b1000 -
b1 !
b1 %
b1 ,
b111 '
b111 +
b1111 #
b1111 $
b1111 /
#320
b10000 /
