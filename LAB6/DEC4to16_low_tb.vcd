$date
	Sat Oct 18 21:23:36 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module DEC4to16_low_tb $end
$var wire 16 ! y [0:15] $end
$var reg 1 " en $end
$var reg 4 # w [3:0] $end
$scope module DEC4to16_low_ins $end
$var wire 1 " en $end
$var wire 4 $ w [3:0] $end
$var wire 16 % y [0:15] $end
$var wire 4 & e [0:3] $end
$scope module stage0 $end
$var wire 1 " en $end
$var wire 2 ' w [1:0] $end
$var reg 4 ( y [0:3] $end
$upscope $end
$scope module stage1a $end
$var wire 1 ) en $end
$var wire 2 * w [1:0] $end
$var reg 4 + y [0:3] $end
$upscope $end
$scope module stage1b $end
$var wire 1 , en $end
$var wire 2 - w [1:0] $end
$var reg 4 . y [0:3] $end
$upscope $end
$scope module stage1c $end
$var wire 1 / en $end
$var wire 2 0 w [1:0] $end
$var reg 4 1 y [0:3] $end
$upscope $end
$scope module stage1d $end
$var wire 1 2 en $end
$var wire 2 3 w [1:0] $end
$var reg 4 4 y [0:3] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 5 i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 6 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 6
b0 5
b1111 4
b0 3
02
b1111 1
b0 0
0/
b1111 .
b0 -
0,
b1111 +
b0 *
0)
b1111 (
b0 '
b1111 &
b1111111111111111 %
b0 $
b0 #
0"
b1111111111111111 !
$end
#10
b1 *
b1 -
b1 0
b1 3
b1 #
b1 $
b1 5
#20
b10 *
b10 -
b10 0
b10 3
b10 #
b10 $
b10 5
#30
b11 *
b11 -
b11 0
b11 3
b11 #
b11 $
b11 5
#40
b1 '
b0 *
b0 -
b0 0
b0 3
b100 #
b100 $
b100 5
#50
b1 *
b1 -
b1 0
b1 3
b101 #
b101 $
b101 5
#60
b10 *
b10 -
b10 0
b10 3
b110 #
b110 $
b110 5
#70
b11 *
b11 -
b11 0
b11 3
b111 #
b111 $
b111 5
#80
b10 '
b0 *
b0 -
b0 0
b0 3
b1000 #
b1000 $
b1000 5
#90
b1 *
b1 -
b1 0
b1 3
b1001 #
b1001 $
b1001 5
#100
b10 *
b10 -
b10 0
b10 3
b1010 #
b1010 $
b1010 5
#110
b11 *
b11 -
b11 0
b11 3
b1011 #
b1011 $
b1011 5
#120
b11 '
b0 *
b0 -
b0 0
b0 3
b1100 #
b1100 $
b1100 5
#130
b1 *
b1 -
b1 0
b1 3
b1101 #
b1101 $
b1101 5
#140
b10 *
b10 -
b10 0
b10 3
b1110 #
b1110 $
b1110 5
#150
b11 *
b11 -
b11 0
b11 3
b1111 #
b1111 $
b1111 5
#160
b111 +
1)
b111111111111111 !
b111111111111111 %
b1111 4
02
b0 '
b0 *
b0 -
b0 0
b0 3
b111 &
b111 (
b0 #
b0 $
1"
b0 6
b10000 5
#170
b1011111111111111 !
b1011111111111111 %
b1011 +
b1 *
b1 -
b1 0
b1 3
b1 #
b1 $
b1 6
#180
b1101111111111111 !
b1101111111111111 %
b1101 +
b10 *
b10 -
b10 0
b10 3
b10 #
b10 $
b10 6
#190
b1110111111111111 !
b1110111111111111 %
b1110 +
b11 *
b11 -
b11 0
b11 3
b11 #
b11 $
b11 6
#200
b111 .
1,
0)
b1011 &
b1011 (
b1111011111111111 !
b1111011111111111 %
b1111 +
b1 '
b0 *
b0 -
b0 0
b0 3
b100 #
b100 $
b100 6
#210
b1111101111111111 !
b1111101111111111 %
b1011 .
b1 *
b1 -
b1 0
b1 3
b101 #
b101 $
b101 6
#220
b1111110111111111 !
b1111110111111111 %
b1101 .
b10 *
b10 -
b10 0
b10 3
b110 #
b110 $
b110 6
#230
b1111111011111111 !
b1111111011111111 %
b1110 .
b11 *
b11 -
b11 0
b11 3
b111 #
b111 $
b111 6
#240
b111 1
1/
0,
b1101 &
b1101 (
b1111111101111111 !
b1111111101111111 %
b1111 .
b10 '
b0 *
b0 -
b0 0
b0 3
b1000 #
b1000 $
b1000 6
#250
b1111111110111111 !
b1111111110111111 %
b1011 1
b1 *
b1 -
b1 0
b1 3
b1001 #
b1001 $
b1001 6
#260
b1111111111011111 !
b1111111111011111 %
b1101 1
b10 *
b10 -
b10 0
b10 3
b1010 #
b1010 $
b1010 6
#270
b1111111111101111 !
b1111111111101111 %
b1110 1
b11 *
b11 -
b11 0
b11 3
b1011 #
b1011 $
b1011 6
#280
b111 4
12
0/
b1110 &
b1110 (
b1111111111110111 !
b1111111111110111 %
b1111 1
b11 '
b0 *
b0 -
b0 0
b0 3
b1100 #
b1100 $
b1100 6
#290
b1111111111111011 !
b1111111111111011 %
b1011 4
b1 *
b1 -
b1 0
b1 3
b1101 #
b1101 $
b1101 6
#300
b1111111111111101 !
b1111111111111101 %
b1101 4
b10 *
b10 -
b10 0
b10 3
b1110 #
b1110 $
b1110 6
#310
b1111111111111110 !
b1111111111111110 %
b1110 4
b11 *
b11 -
b11 0
b11 3
b1111 #
b1111 $
b1111 6
#320
b10000 6
