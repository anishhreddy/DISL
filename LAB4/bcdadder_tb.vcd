$date
	Sat Aug 30 00:59:38 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module bcdadder_tb $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 1 # cin $end
$var reg 4 $ x [3:0] $end
$var reg 4 % y [3:0] $end
$scope module ins_bcdadder $end
$var wire 1 & a $end
$var wire 1 # cin $end
$var wire 4 ' x [3:0] $end
$var wire 4 ( y [3:0] $end
$var wire 4 ) z [3:0] $end
$var wire 4 * s [3:0] $end
$var wire 1 + k $end
$var wire 1 " cout $end
$scope module stage0 $end
$var wire 1 # cin $end
$var wire 4 , x [3:0] $end
$var wire 4 - y [3:0] $end
$var wire 4 . sum [3:0] $end
$var wire 1 + cout $end
$var wire 3 / c [3:1] $end
$scope module stage0 $end
$var wire 1 0 carry $end
$var wire 1 1 sum $end
$var wire 1 2 x $end
$var wire 1 3 y $end
$var wire 1 # z $end
$upscope $end
$scope module stage1 $end
$var wire 1 4 carry $end
$var wire 1 5 sum $end
$var wire 1 6 x $end
$var wire 1 7 y $end
$var wire 1 8 z $end
$upscope $end
$scope module stage2 $end
$var wire 1 9 carry $end
$var wire 1 : sum $end
$var wire 1 ; x $end
$var wire 1 < y $end
$var wire 1 = z $end
$upscope $end
$scope module stage3 $end
$var wire 1 + carry $end
$var wire 1 > sum $end
$var wire 1 ? x $end
$var wire 1 @ y $end
$var wire 1 A z $end
$upscope $end
$upscope $end
$scope module stage1 $end
$var wire 1 # cin $end
$var wire 4 B x [3:0] $end
$var wire 4 C y [3:0] $end
$var wire 4 D sum [3:0] $end
$var wire 1 " cout $end
$var wire 3 E c [3:1] $end
$scope module stage0 $end
$var wire 1 F carry $end
$var wire 1 G sum $end
$var wire 1 H x $end
$var wire 1 I y $end
$var wire 1 # z $end
$upscope $end
$scope module stage1 $end
$var wire 1 J carry $end
$var wire 1 K sum $end
$var wire 1 L x $end
$var wire 1 M y $end
$var wire 1 N z $end
$upscope $end
$scope module stage2 $end
$var wire 1 O carry $end
$var wire 1 P sum $end
$var wire 1 Q x $end
$var wire 1 R y $end
$var wire 1 S z $end
$upscope $end
$scope module stage3 $end
$var wire 1 " carry $end
$var wire 1 T sum $end
$var wire 1 U x $end
$var wire 1 V y $end
$var wire 1 W z $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
1W
0V
1U
0T
1S
1R
1Q
1P
1O
0N
1M
1L
0K
1J
0I
1H
1G
0F
b110 E
b101 D
b110 C
b1111 B
0A
0@
1?
1>
0=
1<
0;
1:
09
08
17
06
15
04
13
02
11
00
b0 /
b1111 .
b111 -
b1000 ,
0+
b101 *
b1111 )
b111 (
b1000 '
1&
b111 %
b1000 $
0#
1"
b101 !
$end
#20
1S
1W
1J
b110 E
1O
0K
1M
1R
0P
b1 !
b1 *
b1 D
0T
1"
b110 C
1&
1A
0Q
b100 /
19
1U
0:
b1011 )
b1011 .
b1011 B
1>
07
16
1;
0?
b101 %
b101 (
b101 -
b110 $
b110 '
b110 ,
#40
